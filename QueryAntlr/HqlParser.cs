//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Hql.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419



using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class HqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, AND=3, OR=4, NOT=5, DATETIME=6, TIME=7, DATE=8, PHRASE=9, 
		INT=10, POSITIVE_INT=11, FLOAT=12, IDENTIFIER=13, WORD=14, TILDE=15, EXISTS=16, 
		STRINGLITERAL=17, EQ=18, RANGE=19, CONTAINS=20, SEARCH=21, WS=22;
	public const int
		RULE_query = 0, RULE_complexExpr = 1, RULE_termExpr = 2, RULE_existsExpr = 3, 
		RULE_rangeExpr = 4, RULE_and = 5, RULE_or = 6, RULE_not = 7, RULE_eq = 8, 
		RULE_range = 9, RULE_contains = 10, RULE_search = 11, RULE_dateValue = 12, 
		RULE_floatValue = 13, RULE_intValue = 14, RULE_date = 15, RULE_time = 16, 
		RULE_term = 17, RULE_phrase = 18, RULE_field = 19, RULE_phraseOptions = 20, 
		RULE_numberValue = 21, RULE_stringValue = 22, RULE_value = 23;
	public static readonly string[] ruleNames = {
		"query", "complexExpr", "termExpr", "existsExpr", "rangeExpr", "and", 
		"or", "not", "eq", "range", "contains", "search", "dateValue", "floatValue", 
		"intValue", "date", "time", "term", "phrase", "field", "phraseOptions", 
		"numberValue", "stringValue", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, null, null, null, null, null, null, null, 
		null, null, null, "'~'", "'?'", null, null, null, "'contains'", "'search'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "AND", "OR", "NOT", "DATETIME", "TIME", "DATE", "PHRASE", 
		"INT", "POSITIVE_INT", "FLOAT", "IDENTIFIER", "WORD", "TILDE", "EXISTS", 
		"STRINGLITERAL", "EQ", "RANGE", "CONTAINS", "SEARCH", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static HqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public HqlParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class QueryContext : ParserRuleContext {
		public ComplexExprContext complexExpr() {
			return GetRuleContext<ComplexExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(HqlParser.Eof, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; complexExpr(0);
			State = 49; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexExprContext : ParserRuleContext {
		public ComplexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexExpr; } }
	 
		public ComplexExprContext() { }
		public virtual void CopyFrom(ComplexExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BracesComplexExpressionContext : ComplexExprContext {
		public ComplexExprContext complexExpr() {
			return GetRuleContext<ComplexExprContext>(0);
		}
		public BracesComplexExpressionContext(ComplexExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracesComplexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultipleComplexExpressionContext : ComplexExprContext {
		public ComplexExprContext[] complexExpr() {
			return GetRuleContexts<ComplexExprContext>();
		}
		public ComplexExprContext complexExpr(int i) {
			return GetRuleContext<ComplexExprContext>(i);
		}
		public MultipleComplexExpressionContext(ComplexExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleComplexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExpressionContext : ComplexExprContext {
		public RangeExprContext rangeExpr() {
			return GetRuleContext<RangeExprContext>(0);
		}
		public RangeExpressionContext(ComplexExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndComplexExpressionContext : ComplexExprContext {
		public ComplexExprContext[] complexExpr() {
			return GetRuleContexts<ComplexExprContext>();
		}
		public ComplexExprContext complexExpr(int i) {
			return GetRuleContext<ComplexExprContext>(i);
		}
		public AndContext and() {
			return GetRuleContext<AndContext>(0);
		}
		public AndComplexExpressionContext(ComplexExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndComplexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrComplexExpressionContext : ComplexExprContext {
		public ComplexExprContext[] complexExpr() {
			return GetRuleContexts<ComplexExprContext>();
		}
		public ComplexExprContext complexExpr(int i) {
			return GetRuleContext<ComplexExprContext>(i);
		}
		public OrContext or() {
			return GetRuleContext<OrContext>(0);
		}
		public OrComplexExpressionContext(ComplexExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrComplexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotComplexExpressionContext : ComplexExprContext {
		public NotContext not() {
			return GetRuleContext<NotContext>(0);
		}
		public ComplexExprContext complexExpr() {
			return GetRuleContext<ComplexExprContext>(0);
		}
		public NotComplexExpressionContext(ComplexExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotComplexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermExpressionContext : ComplexExprContext {
		public TermExprContext termExpr() {
			return GetRuleContext<TermExprContext>(0);
		}
		public ExistsExprContext existsExpr() {
			return GetRuleContext<ExistsExprContext>(0);
		}
		public TermExpressionContext(ComplexExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexExprContext complexExpr() {
		return complexExpr(0);
	}

	private ComplexExprContext complexExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ComplexExprContext _localctx = new ComplexExprContext(Context, _parentState);
		ComplexExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_complexExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new BracesComplexExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 52; Match(T__0);
				State = 53; complexExpr(0);
				State = 54; Match(T__1);
				}
				break;
			case 2:
				{
				_localctx = new NotComplexExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 56; not();
				State = 57; complexExpr(5);
				}
				break;
			case 3:
				{
				_localctx = new TermExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 59; termExpr();
				}
				break;
			case 4:
				{
				_localctx = new TermExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 60; existsExpr();
				}
				break;
			case 5:
				{
				_localctx = new RangeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 61; rangeExpr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 74;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new AndComplexExpressionContext(new ComplexExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_complexExpr);
						State = 64;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 65; and();
						State = 66; complexExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new OrComplexExpressionContext(new ComplexExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_complexExpr);
						State = 68;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 69; or();
						State = 70; complexExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new MultipleComplexExpressionContext(new ComplexExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_complexExpr);
						State = 72;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 73; complexExpr(2);
						}
						break;
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermExprContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public EqContext eq() {
			return GetRuleContext<EqContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ContainsContext contains() {
			return GetRuleContext<ContainsContext>(0);
		}
		public SearchContext search() {
			return GetRuleContext<SearchContext>(0);
		}
		public TermExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermExprContext termExpr() {
		TermExprContext _localctx = new TermExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_termExpr);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; field();
				State = 80; eq();
				State = 81; value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; field();
				State = 84; contains();
				State = 85; value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 87; field();
				State = 88; search();
				State = 89; value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 91; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistsExprContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public ITerminalNode EXISTS() { return GetToken(HqlParser.EXISTS, 0); }
		public ExistsExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existsExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExistsExprContext existsExpr() {
		ExistsExprContext _localctx = new ExistsExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_existsExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; field();
			State = 95; Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeExprContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public RangeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeExprContext rangeExpr() {
		RangeExprContext _localctx = new RangeExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_rangeExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; field();
			State = 98; range();
			State = 99; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(HqlParser.AND, 0); }
		public AndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndContext and() {
		AndContext _localctx = new AndContext(Context, State);
		EnterRule(_localctx, 10, RULE_and);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrContext : ParserRuleContext {
		public ITerminalNode OR() { return GetToken(HqlParser.OR, 0); }
		public OrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrContext or() {
		OrContext _localctx = new OrContext(Context, State);
		EnterRule(_localctx, 12, RULE_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(HqlParser.NOT, 0); }
		public NotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotContext not() {
		NotContext _localctx = new NotContext(Context, State);
		EnterRule(_localctx, 14, RULE_not);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(HqlParser.EQ, 0); }
		public EqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eq; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqContext eq() {
		EqContext _localctx = new EqContext(Context, State);
		EnterRule(_localctx, 16, RULE_eq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode RANGE() { return GetToken(HqlParser.RANGE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 18, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(RANGE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainsContext : ParserRuleContext {
		public ITerminalNode CONTAINS() { return GetToken(HqlParser.CONTAINS, 0); }
		public ContainsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contains; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContains(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainsContext contains() {
		ContainsContext _localctx = new ContainsContext(Context, State);
		EnterRule(_localctx, 20, RULE_contains);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(CONTAINS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SearchContext : ParserRuleContext {
		public ITerminalNode SEARCH() { return GetToken(HqlParser.SEARCH, 0); }
		public SearchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SearchContext search() {
		SearchContext _localctx = new SearchContext(Context, State);
		EnterRule(_localctx, 22, RULE_search);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(SEARCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateValueContext : ParserRuleContext {
		public ITerminalNode DATETIME() { return GetToken(HqlParser.DATETIME, 0); }
		public DateValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateValueContext dateValue() {
		DateValueContext _localctx = new DateValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_dateValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(DATETIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatValueContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(HqlParser.FLOAT, 0); }
		public FloatValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatValueContext floatValue() {
		FloatValueContext _localctx = new FloatValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_floatValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntValueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(HqlParser.INT, 0); }
		public IntValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntValueContext intValue() {
		IntValueContext _localctx = new IntValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_intValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(HqlParser.DATE, 0); }
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(Context, State);
		EnterRule(_localctx, 30, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(DATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(HqlParser.TIME, 0); }
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(Context, State);
		EnterRule(_localctx, 32, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(TIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(HqlParser.WORD, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(HqlParser.IDENTIFIER, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 34, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==WORD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhraseContext : ParserRuleContext {
		public ITerminalNode PHRASE() { return GetToken(HqlParser.PHRASE, 0); }
		public ITerminalNode TILDE() { return GetToken(HqlParser.TILDE, 0); }
		public PhraseOptionsContext phraseOptions() {
			return GetRuleContext<PhraseOptionsContext>(0);
		}
		public PhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phrase; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhraseContext phrase() {
		PhraseContext _localctx = new PhraseContext(Context, State);
		EnterRule(_localctx, 36, RULE_phrase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(PHRASE);
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 128; Match(TILDE);
				State = 129; phraseOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(HqlParser.IDENTIFIER, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 38, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhraseOptionsContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(HqlParser.INT, 0); }
		public PhraseOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phraseOptions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhraseOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhraseOptionsContext phraseOptions() {
		PhraseOptionsContext _localctx = new PhraseOptionsContext(Context, State);
		EnterRule(_localctx, 40, RULE_phraseOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberValueContext : ParserRuleContext {
		public IntValueContext intValue() {
			return GetRuleContext<IntValueContext>(0);
		}
		public FloatValueContext floatValue() {
			return GetRuleContext<FloatValueContext>(0);
		}
		public NumberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberValueContext numberValue() {
		NumberValueContext _localctx = new NumberValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_numberValue);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; intValue();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; floatValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public PhraseContext phrase() {
			return GetRuleContext<PhraseContext>(0);
		}
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_stringValue);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
			case WORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140; term();
				}
				break;
			case PHRASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141; phrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public NumberValueContext numberValue() {
			return GetRuleContext<NumberValueContext>(0);
		}
		public DateValueContext dateValue() {
			return GetRuleContext<DateValueContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHqlVisitor<TResult> typedVisitor = visitor as IHqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_value);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; numberValue();
				}
				break;
			case DATETIME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145; dateValue();
				}
				break;
			case PHRASE:
			case IDENTIFIER:
			case WORD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 146; stringValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return complexExpr_sempred((ComplexExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool complexExpr_sempred(ComplexExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x18");
		sb.Append("\x98\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\x3\x2\x3\x2\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x5\x3\x41\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\a\x3M\n\x3\f\x3\xE\x3P\v\x3\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4");
		sb.Append("\x5\x4_\n\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a");
		sb.Append("\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r");
		sb.Append("\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3");
		sb.Append("\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x5\x14\x85\n");
		sb.Append("\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x5\x17\x8D\n");
		sb.Append("\x17\x3\x18\x3\x18\x5\x18\x91\n\x18\x3\x19\x3\x19\x3\x19\x5");
		sb.Append("\x19\x96\n\x19\x3\x19\x2\x3\x4\x1A\x2\x4\x6\b\n\f\xE\x10\x12");
		sb.Append("\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x2\x3\x3\x2\xF\x10\x8E");
		sb.Append("\x2\x32\x3\x2\x2\x2\x4@\x3\x2\x2\x2\x6^\x3\x2\x2\x2\b`\x3\x2");
		sb.Append("\x2\x2\n\x63\x3\x2\x2\x2\fg\x3\x2\x2\x2\xEi\x3\x2\x2\x2\x10");
		sb.Append("k\x3\x2\x2\x2\x12m\x3\x2\x2\x2\x14o\x3\x2\x2\x2\x16q\x3\x2\x2");
		sb.Append("\x2\x18s\x3\x2\x2\x2\x1Au\x3\x2\x2\x2\x1Cw\x3\x2\x2\x2\x1Ey");
		sb.Append("\x3\x2\x2\x2 {\x3\x2\x2\x2\"}\x3\x2\x2\x2$\x7F\x3\x2\x2\x2&");
		sb.Append("\x81\x3\x2\x2\x2(\x86\x3\x2\x2\x2*\x88\x3\x2\x2\x2,\x8C\x3\x2");
		sb.Append("\x2\x2.\x90\x3\x2\x2\x2\x30\x95\x3\x2\x2\x2\x32\x33\x5\x4\x3");
		sb.Append("\x2\x33\x34\a\x2\x2\x3\x34\x3\x3\x2\x2\x2\x35\x36\b\x3\x1\x2");
		sb.Append("\x36\x37\a\x3\x2\x2\x37\x38\x5\x4\x3\x2\x38\x39\a\x4\x2\x2\x39");
		sb.Append("\x41\x3\x2\x2\x2:;\x5\x10\t\x2;<\x5\x4\x3\a<\x41\x3\x2\x2\x2");
		sb.Append("=\x41\x5\x6\x4\x2>\x41\x5\b\x5\x2?\x41\x5\n\x6\x2@\x35\x3\x2");
		sb.Append("\x2\x2@:\x3\x2\x2\x2@=\x3\x2\x2\x2@>\x3\x2\x2\x2@?\x3\x2\x2");
		sb.Append("\x2\x41N\x3\x2\x2\x2\x42\x43\f\t\x2\x2\x43\x44\x5\f\a\x2\x44");
		sb.Append("\x45\x5\x4\x3\n\x45M\x3\x2\x2\x2\x46G\f\b\x2\x2GH\x5\xE\b\x2");
		sb.Append("HI\x5\x4\x3\tIM\x3\x2\x2\x2JK\f\x3\x2\x2KM\x5\x4\x3\x4L\x42");
		sb.Append("\x3\x2\x2\x2L\x46\x3\x2\x2\x2LJ\x3\x2\x2\x2MP\x3\x2\x2\x2NL");
		sb.Append("\x3\x2\x2\x2NO\x3\x2\x2\x2O\x5\x3\x2\x2\x2PN\x3\x2\x2\x2QR\x5");
		sb.Append("(\x15\x2RS\x5\x12\n\x2ST\x5\x30\x19\x2T_\x3\x2\x2\x2UV\x5(\x15");
		sb.Append("\x2VW\x5\x16\f\x2WX\x5\x30\x19\x2X_\x3\x2\x2\x2YZ\x5(\x15\x2");
		sb.Append("Z[\x5\x18\r\x2[\\\x5\x30\x19\x2\\_\x3\x2\x2\x2]_\x5\x30\x19");
		sb.Append("\x2^Q\x3\x2\x2\x2^U\x3\x2\x2\x2^Y\x3\x2\x2\x2^]\x3\x2\x2\x2");
		sb.Append("_\a\x3\x2\x2\x2`\x61\x5(\x15\x2\x61\x62\a\x12\x2\x2\x62\t\x3");
		sb.Append("\x2\x2\x2\x63\x64\x5(\x15\x2\x64\x65\x5\x14\v\x2\x65\x66\x5");
		sb.Append("\x30\x19\x2\x66\v\x3\x2\x2\x2gh\a\x5\x2\x2h\r\x3\x2\x2\x2ij");
		sb.Append("\a\x6\x2\x2j\xF\x3\x2\x2\x2kl\a\a\x2\x2l\x11\x3\x2\x2\x2mn\a");
		sb.Append("\x14\x2\x2n\x13\x3\x2\x2\x2op\a\x15\x2\x2p\x15\x3\x2\x2\x2q");
		sb.Append("r\a\x16\x2\x2r\x17\x3\x2\x2\x2st\a\x17\x2\x2t\x19\x3\x2\x2\x2");
		sb.Append("uv\a\b\x2\x2v\x1B\x3\x2\x2\x2wx\a\xE\x2\x2x\x1D\x3\x2\x2\x2");
		sb.Append("yz\a\f\x2\x2z\x1F\x3\x2\x2\x2{|\a\n\x2\x2|!\x3\x2\x2\x2}~\a");
		sb.Append("\t\x2\x2~#\x3\x2\x2\x2\x7F\x80\t\x2\x2\x2\x80%\x3\x2\x2\x2\x81");
		sb.Append("\x84\a\v\x2\x2\x82\x83\a\x11\x2\x2\x83\x85\x5*\x16\x2\x84\x82");
		sb.Append("\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\'\x3\x2\x2\x2\x86\x87\a");
		sb.Append("\xF\x2\x2\x87)\x3\x2\x2\x2\x88\x89\a\f\x2\x2\x89+\x3\x2\x2\x2");
		sb.Append("\x8A\x8D\x5\x1E\x10\x2\x8B\x8D\x5\x1C\xF\x2\x8C\x8A\x3\x2\x2");
		sb.Append("\x2\x8C\x8B\x3\x2\x2\x2\x8D-\x3\x2\x2\x2\x8E\x91\x5$\x13\x2");
		sb.Append("\x8F\x91\x5&\x14\x2\x90\x8E\x3\x2\x2\x2\x90\x8F\x3\x2\x2\x2");
		sb.Append("\x91/\x3\x2\x2\x2\x92\x96\x5,\x17\x2\x93\x96\x5\x1A\xE\x2\x94");
		sb.Append("\x96\x5.\x18\x2\x95\x92\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95");
		sb.Append("\x94\x3\x2\x2\x2\x96\x31\x3\x2\x2\x2\n@LN^\x84\x8C\x90\x95");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
