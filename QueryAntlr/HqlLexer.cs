//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Hql.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419



using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class HqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, AND=3, OR=4, NOT=5, DATETIME=6, TIME=7, DATE=8, PHRASE=9, 
		INT=10, POSITIVE_INT=11, FLOAT=12, IDENTIFIER=13, WORD=14, TILDE=15, EXISTS=16, 
		STRINGLITERAL=17, EQ=18, RANGE=19, CONTAINS=20, SEARCH=21, WS=22;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "AND", "OR", "NOT", "DATETIME", "TIME", "DATE", "PHRASE", 
		"INT", "POSITIVE_INT", "FLOAT", "IDENTIFIER", "WORD", "TILDE", "EXISTS", 
		"WORDCHARACTER", "STRINGLITERAL", "STRINGCHARACTERS", "STRINGCHARACTER", 
		"ESCAPESEQUENCE", "UNICODESCAPE", "HEXDIGIT", "EQ", "RANGE", "CONTAINS", 
		"SEARCH", "WS", "DQUOTE", "DIGIT", "MINUS", "LETTER", "A", "B", "C", "D", 
		"E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", 
		"S", "T", "U", "V", "W", "X", "Y", "Z"
	};


	public HqlLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, null, null, null, null, null, null, null, 
		null, null, null, "'~'", "'?'", null, null, null, "'contains'", "'search'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "AND", "OR", "NOT", "DATETIME", "TIME", "DATE", "PHRASE", 
		"INT", "POSITIVE_INT", "FLOAT", "IDENTIFIER", "WORD", "TILDE", "EXISTS", 
		"STRINGLITERAL", "EQ", "RANGE", "CONTAINS", "SEARCH", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static HqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x18");
		sb.Append("\x157\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
		sb.Append("\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B");
		sb.Append("\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4");
		sb.Append(" \t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4");
		sb.Append("(\t(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30");
		sb.Append("\t\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x88");
		sb.Append("\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x8F\n\a\x3\a\x3\a\x3\b\x5");
		sb.Append("\b\x94\n\b\x3\b\x3\b\x3\b\x5\b\x99\n\b\x3\b\x3\b\x3\b\x5\b\x9E");
		sb.Append("\n\b\x3\b\x5\b\xA1\n\b\x3\t\x3\t\x3\t\x5\t\xA6\n\t\x3\t\x3\t");
		sb.Append("\x3\t\x3\t\x5\t\xAC\n\t\x3\t\x3\t\x3\t\x5\t\xB1\n\t\x3\t\x3");
		sb.Append("\t\x3\n\x3\n\x3\v\x5\v\xB8\n\v\x3\v\x6\v\xBB\n\v\r\v\xE\v\xBC");
		sb.Append("\x3\f\x6\f\xC0\n\f\r\f\xE\f\xC1\x3\r\x3\r\x3\r\x6\r\xC7\n\r");
		sb.Append("\r\r\xE\r\xC8\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xCF\n\xE\f\xE\xE");
		sb.Append("\xE\xD2\v\xE\x3\xF\x6\xF\xD5\n\xF\r\xF\xE\xF\xD6\x3\x10\x3\x10");
		sb.Append("\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x5\x13\xE1\n\x13");
		sb.Append("\x3\x13\x3\x13\x3\x14\x6\x14\xE6\n\x14\r\x14\xE\x14\xE7\x3\x15");
		sb.Append("\x3\x15\x5\x15\xEC\n\x15\x3\x16\x3\x16\x3\x16\x5\x16\xF1\n\x16");
		sb.Append("\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3");
		sb.Append("\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A");
		sb.Append("\x103\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3");
		sb.Append("\x1C\x3\x1D\x6\x1D\x116\n\x1D\r\x1D\xE\x1D\x117\x3\x1D\x3\x1D");
		sb.Append("\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3");
		sb.Append("#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3)\x3)\x3*\x3*");
		sb.Append("\x3+\x3+\x3,\x3,\x3-\x3-\x3.\x3.\x3/\x3/\x3\x30\x3\x30\x3\x31");
		sb.Append("\x3\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x35\x3");
		sb.Append("\x35\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39");
		sb.Append("\x3:\x3:\x3;\x3;\x3\xC8\x2<\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF");
		sb.Append("\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12");
		sb.Append("#\x2%\x13\'\x2)\x2+\x2-\x2/\x2\x31\x14\x33\x15\x35\x16\x37\x17");
		sb.Append("\x39\x18;\x2=\x2?\x2\x41\x2\x43\x2\x45\x2G\x2I\x2K\x2M\x2O\x2");
		sb.Append("Q\x2S\x2U\x2W\x2Y\x2[\x2]\x2_\x2\x61\x2\x63\x2\x65\x2g\x2i\x2");
		sb.Append("k\x2m\x2o\x2q\x2s\x2u\x2\x3\x2&\x3\x2\x32;\x4\x2/\x30\x61\x61");
		sb.Append("\t\x2\v\f\xF\xF\"$*+>\x41]_\x80\x80\x4\x2$$^^\n\x2$$))^^\x64");
		sb.Append("\x64hhppttvv\x5\x2\x32;\x43H\x63h\x4\x2<<??\x4\x2>>@@\x5\x2");
		sb.Append("\v\f\xF\xF\"\"\x4\x2\x43\\\x63|\x4\x2\x43\x43\x63\x63\x4\x2");
		sb.Append("\x44\x44\x64\x64\x4\x2\x45\x45\x65\x65\x4\x2\x46\x46\x66\x66");
		sb.Append("\x4\x2GGgg\x4\x2HHhh\x4\x2IIii\x4\x2JJjj\x4\x2KKkk\x4\x2LLl");
		sb.Append("l\x4\x2MMmm\x4\x2NNnn\x4\x2OOoo\x4\x2PPpp\x4\x2QQqq\x4\x2RR");
		sb.Append("rr\x4\x2SSss\x4\x2TTtt\x4\x2UUuu\x4\x2VVvv\x4\x2WWww\x4\x2X");
		sb.Append("Xxx\x4\x2YYyy\x4\x2ZZzz\x4\x2[[{{\x4\x2\\\\||\x14A\x2\x3\x3");
		sb.Append("\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2");
		sb.Append("\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11");
		sb.Append("\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3");
		sb.Append("\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2");
		sb.Append("\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2");
		sb.Append("\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37");
		sb.Append("\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x3w\x3\x2\x2\x2\x5y\x3\x2\x2");
		sb.Append("\x2\a{\x3\x2\x2\x2\t\x7F\x3\x2\x2\x2\v\x87\x3\x2\x2\x2\r\x89");
		sb.Append("\x3\x2\x2\x2\xF\x93\x3\x2\x2\x2\x11\xA5\x3\x2\x2\x2\x13\xB4");
		sb.Append("\x3\x2\x2\x2\x15\xB7\x3\x2\x2\x2\x17\xBF\x3\x2\x2\x2\x19\xC3");
		sb.Append("\x3\x2\x2\x2\x1B\xCA\x3\x2\x2\x2\x1D\xD4\x3\x2\x2\x2\x1F\xD8");
		sb.Append("\x3\x2\x2\x2!\xDA\x3\x2\x2\x2#\xDC\x3\x2\x2\x2%\xDE\x3\x2\x2");
		sb.Append("\x2\'\xE5\x3\x2\x2\x2)\xEB\x3\x2\x2\x2+\xF0\x3\x2\x2\x2-\xF2");
		sb.Append("\x3\x2\x2\x2/\xF9\x3\x2\x2\x2\x31\xFB\x3\x2\x2\x2\x33\x102\x3");
		sb.Append("\x2\x2\x2\x35\x104\x3\x2\x2\x2\x37\x10D\x3\x2\x2\x2\x39\x115");
		sb.Append("\x3\x2\x2\x2;\x11B\x3\x2\x2\x2=\x11D\x3\x2\x2\x2?\x11F\x3\x2");
		sb.Append("\x2\x2\x41\x121\x3\x2\x2\x2\x43\x123\x3\x2\x2\x2\x45\x125\x3");
		sb.Append("\x2\x2\x2G\x127\x3\x2\x2\x2I\x129\x3\x2\x2\x2K\x12B\x3\x2\x2");
		sb.Append("\x2M\x12D\x3\x2\x2\x2O\x12F\x3\x2\x2\x2Q\x131\x3\x2\x2\x2S\x133");
		sb.Append("\x3\x2\x2\x2U\x135\x3\x2\x2\x2W\x137\x3\x2\x2\x2Y\x139\x3\x2");
		sb.Append("\x2\x2[\x13B\x3\x2\x2\x2]\x13D\x3\x2\x2\x2_\x13F\x3\x2\x2\x2");
		sb.Append("\x61\x141\x3\x2\x2\x2\x63\x143\x3\x2\x2\x2\x65\x145\x3\x2\x2");
		sb.Append("\x2g\x147\x3\x2\x2\x2i\x149\x3\x2\x2\x2k\x14B\x3\x2\x2\x2m\x14D");
		sb.Append("\x3\x2\x2\x2o\x14F\x3\x2\x2\x2q\x151\x3\x2\x2\x2s\x153\x3\x2");
		sb.Append("\x2\x2u\x155\x3\x2\x2\x2wx\a*\x2\x2x\x4\x3\x2\x2\x2yz\a+\x2");
		sb.Append("\x2z\x6\x3\x2\x2\x2{|\x5\x43\"\x2|}\x5]/\x2}~\x5I%\x2~\b\x3");
		sb.Append("\x2\x2\x2\x7F\x80\x5_\x30\x2\x80\x81\x5\x65\x33\x2\x81\n\x3");
		sb.Append("\x2\x2\x2\x82\x83\x5]/\x2\x83\x84\x5_\x30\x2\x84\x85\x5i\x35");
		sb.Append("\x2\x85\x88\x3\x2\x2\x2\x86\x88\a#\x2\x2\x87\x82\x3\x2\x2\x2");
		sb.Append("\x87\x86\x3\x2\x2\x2\x88\f\x3\x2\x2\x2\x89\x8A\x5;\x1E\x2\x8A");
		sb.Append("\x8E\x5\x11\t\x2\x8B\x8C\x5\x39\x1D\x2\x8C\x8D\x5\xF\b\x2\x8D");
		sb.Append("\x8F\x3\x2\x2\x2\x8E\x8B\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F");
		sb.Append("\x90\x3\x2\x2\x2\x90\x91\x5;\x1E\x2\x91\xE\x3\x2\x2\x2\x92\x94");
		sb.Append("\x5=\x1F\x2\x93\x92\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x95");
		sb.Append("\x3\x2\x2\x2\x95\x96\x5=\x1F\x2\x96\x98\a<\x2\x2\x97\x99\x5");
		sb.Append("=\x1F\x2\x98\x97\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9A\x3");
		sb.Append("\x2\x2\x2\x9A\xA0\x5=\x1F\x2\x9B\x9D\a<\x2\x2\x9C\x9E\x5=\x1F");
		sb.Append("\x2\x9D\x9C\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9F\x3\x2\x2");
		sb.Append("\x2\x9F\xA1\x5=\x1F\x2\xA0\x9B\x3\x2\x2\x2\xA0\xA1\x3\x2\x2");
		sb.Append("\x2\xA1\x10\x3\x2\x2\x2\xA2\xA3\x5=\x1F\x2\xA3\xA4\x5=\x1F\x2");
		sb.Append("\xA4\xA6\x3\x2\x2\x2\xA5\xA2\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2");
		sb.Append("\xA6\xA7\x3\x2\x2\x2\xA7\xA8\x5=\x1F\x2\xA8\xA9\x5=\x1F\x2\xA9");
		sb.Append("\xAB\a/\x2\x2\xAA\xAC\x5=\x1F\x2\xAB\xAA\x3\x2\x2\x2\xAB\xAC");
		sb.Append("\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAE\x5=\x1F\x2\xAE\xB0");
		sb.Append("\a/\x2\x2\xAF\xB1\x5=\x1F\x2\xB0\xAF\x3\x2\x2\x2\xB0\xB1\x3");
		sb.Append("\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB3\x5=\x1F\x2\xB3\x12\x3");
		sb.Append("\x2\x2\x2\xB4\xB5\x5%\x13\x2\xB5\x14\x3\x2\x2\x2\xB6\xB8\x5");
		sb.Append("? \x2\xB7\xB6\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xBA\x3\x2");
		sb.Append("\x2\x2\xB9\xBB\x5\x17\f\x2\xBA\xB9\x3\x2\x2\x2\xBB\xBC\x3\x2");
		sb.Append("\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\x16\x3\x2");
		sb.Append("\x2\x2\xBE\xC0\x5=\x1F\x2\xBF\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2");
		sb.Append("\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\x18\x3\x2");
		sb.Append("\x2\x2\xC3\xC4\x5\x15\v\x2\xC4\xC6\a\x30\x2\x2\xC5\xC7\t\x2");
		sb.Append("\x2\x2\xC6\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\x3\x2");
		sb.Append("\x2\x2\xC8\xC6\x3\x2\x2\x2\xC9\x1A\x3\x2\x2\x2\xCA\xD0\x5\x41");
		sb.Append("!\x2\xCB\xCF\x5\x41!\x2\xCC\xCF\x5=\x1F\x2\xCD\xCF\t\x3\x2\x2");
		sb.Append("\xCE\xCB\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCD\x3\x2\x2\x2");
		sb.Append("\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2");
		sb.Append("\xD1\x1C\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3\xD5\x5#\x12\x2");
		sb.Append("\xD4\xD3\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2");
		sb.Append("\xD6\xD7\x3\x2\x2\x2\xD7\x1E\x3\x2\x2\x2\xD8\xD9\a\x80\x2\x2");
		sb.Append("\xD9 \x3\x2\x2\x2\xDA\xDB\a\x41\x2\x2\xDB\"\x3\x2\x2\x2\xDC");
		sb.Append("\xDD\n\x4\x2\x2\xDD$\x3\x2\x2\x2\xDE\xE0\a$\x2\x2\xDF\xE1\x5");
		sb.Append("\'\x14\x2\xE0\xDF\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE2\x3");
		sb.Append("\x2\x2\x2\xE2\xE3\a$\x2\x2\xE3&\x3\x2\x2\x2\xE4\xE6\x5)\x15");
		sb.Append("\x2\xE5\xE4\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xE5\x3\x2\x2");
		sb.Append("\x2\xE7\xE8\x3\x2\x2\x2\xE8(\x3\x2\x2\x2\xE9\xEC\n\x5\x2\x2");
		sb.Append("\xEA\xEC\x5+\x16\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEA\x3\x2\x2\x2");
		sb.Append("\xEC*\x3\x2\x2\x2\xED\xEE\a^\x2\x2\xEE\xF1\t\x6\x2\x2\xEF\xF1");
		sb.Append("\x5-\x17\x2\xF0\xED\x3\x2\x2\x2\xF0\xEF\x3\x2\x2\x2\xF1,\x3");
		sb.Append("\x2\x2\x2\xF2\xF3\a^\x2\x2\xF3\xF4\aw\x2\x2\xF4\xF5\x5/\x18");
		sb.Append("\x2\xF5\xF6\x5/\x18\x2\xF6\xF7\x5/\x18\x2\xF7\xF8\x5/\x18\x2");
		sb.Append("\xF8.\x3\x2\x2\x2\xF9\xFA\t\a\x2\x2\xFA\x30\x3\x2\x2\x2\xFB");
		sb.Append("\xFC\t\b\x2\x2\xFC\x32\x3\x2\x2\x2\xFD\x103\t\t\x2\x2\xFE\xFF");
		sb.Append("\a@\x2\x2\xFF\x103\a?\x2\x2\x100\x101\a>\x2\x2\x101\x103\a?");
		sb.Append("\x2\x2\x102\xFD\x3\x2\x2\x2\x102\xFE\x3\x2\x2\x2\x102\x100\x3");
		sb.Append("\x2\x2\x2\x103\x34\x3\x2\x2\x2\x104\x105\a\x65\x2\x2\x105\x106");
		sb.Append("\aq\x2\x2\x106\x107\ap\x2\x2\x107\x108\av\x2\x2\x108\x109\a");
		sb.Append("\x63\x2\x2\x109\x10A\ak\x2\x2\x10A\x10B\ap\x2\x2\x10B\x10C\a");
		sb.Append("u\x2\x2\x10C\x36\x3\x2\x2\x2\x10D\x10E\au\x2\x2\x10E\x10F\a");
		sb.Append("g\x2\x2\x10F\x110\a\x63\x2\x2\x110\x111\at\x2\x2\x111\x112\a");
		sb.Append("\x65\x2\x2\x112\x113\aj\x2\x2\x113\x38\x3\x2\x2\x2\x114\x116");
		sb.Append("\t\n\x2\x2\x115\x114\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117");
		sb.Append("\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2");
		sb.Append("\x119\x11A\b\x1D\x2\x2\x11A:\x3\x2\x2\x2\x11B\x11C\a$\x2\x2");
		sb.Append("\x11C<\x3\x2\x2\x2\x11D\x11E\t\x2\x2\x2\x11E>\x3\x2\x2\x2\x11F");
		sb.Append("\x120\a/\x2\x2\x120@\x3\x2\x2\x2\x121\x122\t\v\x2\x2\x122\x42");
		sb.Append("\x3\x2\x2\x2\x123\x124\t\f\x2\x2\x124\x44\x3\x2\x2\x2\x125\x126");
		sb.Append("\t\r\x2\x2\x126\x46\x3\x2\x2\x2\x127\x128\t\xE\x2\x2\x128H\x3");
		sb.Append("\x2\x2\x2\x129\x12A\t\xF\x2\x2\x12AJ\x3\x2\x2\x2\x12B\x12C\t");
		sb.Append("\x10\x2\x2\x12CL\x3\x2\x2\x2\x12D\x12E\t\x11\x2\x2\x12EN\x3");
		sb.Append("\x2\x2\x2\x12F\x130\t\x12\x2\x2\x130P\x3\x2\x2\x2\x131\x132");
		sb.Append("\t\x13\x2\x2\x132R\x3\x2\x2\x2\x133\x134\t\x14\x2\x2\x134T\x3");
		sb.Append("\x2\x2\x2\x135\x136\t\x15\x2\x2\x136V\x3\x2\x2\x2\x137\x138");
		sb.Append("\t\x16\x2\x2\x138X\x3\x2\x2\x2\x139\x13A\t\x17\x2\x2\x13AZ\x3");
		sb.Append("\x2\x2\x2\x13B\x13C\t\x18\x2\x2\x13C\\\x3\x2\x2\x2\x13D\x13E");
		sb.Append("\t\x19\x2\x2\x13E^\x3\x2\x2\x2\x13F\x140\t\x1A\x2\x2\x140`\x3");
		sb.Append("\x2\x2\x2\x141\x142\t\x1B\x2\x2\x142\x62\x3\x2\x2\x2\x143\x144");
		sb.Append("\t\x1C\x2\x2\x144\x64\x3\x2\x2\x2\x145\x146\t\x1D\x2\x2\x146");
		sb.Append("\x66\x3\x2\x2\x2\x147\x148\t\x1E\x2\x2\x148h\x3\x2\x2\x2\x149");
		sb.Append("\x14A\t\x1F\x2\x2\x14Aj\x3\x2\x2\x2\x14B\x14C\t \x2\x2\x14C");
		sb.Append("l\x3\x2\x2\x2\x14D\x14E\t!\x2\x2\x14En\x3\x2\x2\x2\x14F\x150");
		sb.Append("\t\"\x2\x2\x150p\x3\x2\x2\x2\x151\x152\t#\x2\x2\x152r\x3\x2");
		sb.Append("\x2\x2\x153\x154\t$\x2\x2\x154t\x3\x2\x2\x2\x155\x156\t%\x2");
		sb.Append("\x2\x156v\x3\x2\x2\x2\x19\x2\x87\x8E\x93\x98\x9D\xA0\xA5\xAB");
		sb.Append("\xB0\xB7\xBC\xC1\xC8\xCE\xD0\xD6\xE0\xE7\xEB\xF0\x102\x117\x3");
		sb.Append("\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
